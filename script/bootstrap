#!/bin/zsh
autoload colors && colors;

# Prints informational messages to the user.
info() {
    printf "  [$fg[blue] ... $reset_color] $1\n";
}

# Prints messages that require user action.
user() {
    printf "    [$fg[yellow] ? $reset_color] $1\n";
}

# Prints successful messages.
success() {
    printf "   [$fg[green] OK $reset_color] $1\n";
}

# Prints failure messages.
fail() {
    printf " [$fg[red] FAIL $reset_color] $1\n";
}

# Symlink the first argument (source) to the second argument (destination).
link_file() {
    local src=$1;
    local dst=$2;
    local name=$(basename "$dst");

    local skip=false;
    local overwrite=false;

    if [ -f "$dst" ]; then
        # Check if the destination file is already symlinked to the source.
        # If it is, we can skip it and move on.
        local link=$(readlink "$dst");
        if [[ ( -h "$dst" ) && ( "$src" == "$link" ) ]]; then
            skip=true;
        else
            user "The $name already exists, what would you like to do? [s] Skip, [o] Overwrite?";
            # TODO: Read the action from the user.
        fi;
        unset link;
    fi;

    if [ $skip = false ]; then
        ln -s "$1" "$2";
    fi;
}

# Since we are changing the directory, we have to send the user back to where
# the user was before calling the script.
ORIGIN_DIR=$(pwd);

# Go to the root of the dotfiles project.
#
# Need to get the directory path from the script, this way it won't matter from
# where we'd call the script it will still find the root directory.
#
# `source script/bootstrap` vs. `source bootstrap`
cd "$(dirname $0)/..";
DOTFILES_DIR=$(pwd);

# Before we sync the files to the home directory, we should attempt to update
# the git repository. Given that both the repository and git is available.
if [ -d ".git" ] && hash git 2>/dev/null; then
    info "Pulling the latest changes from the git repository";
    git pull origin master;
fi;

# TODO: Run setup scripts for git, ssh, etc.
# Each setup script should check if setup is necessary. E.g. if the ssh config
# exists the setup has already been completed.
#
# The setup have to be initialized before the linking of files since setup
# might be required for files to be complete.
#
# If needed the setup script should create a config file within its directory
# that can be used regardless of whether the repository files have been updated.

# Find each symlink-able file and link it to the home directory.
info 'Installing the dotfiles symlinks';
for src in $(find "$DOTFILES_DIR" -maxdepth 2 -name '*.symlink'); do
    # Remove the `.symlink` and prepend the dot to the destination file.
    dst="$HOME/.$(basename "${src%.*}")";
    link_file "$src" "$dst";
done;

# Sync the dotfiles from the project-folder to the user home-folder.
# rsync --exclude-from "$DOTFILES_DIR/script/.bootstrap-exclude" -avh --no-perms . ~;

# Source the profile.
source ~/.zprofile;

# Send the user back to the directory that was active before calling the script.
cd "$ORIGIN_DIR";

# Unset the directory variables defined within the script.
unset ORIGIN_DIR DOTFILES_DIR;

# Unset the functions defined within the script.
unset -f info user success fail;
